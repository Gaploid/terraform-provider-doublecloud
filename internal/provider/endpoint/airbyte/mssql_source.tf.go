// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloud/doublecloud/public-api/doublecloud/transfer/v1/endpoint/airbyte/mssql_source.proto

package endpoint_airbyte

import (
	fmt "fmt"
	"google.golang.org/protobuf/proto"
	math "math"

	schema "github.com/hashicorp/terraform-plugin-framework/provider/schema"
	types "github.com/hashicorp/terraform-plugin-framework/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SSLUnencrypted_TF struct with tfsdk field SSLUnencrypted MSSQLSource.ssl_method.unencrypted
type SSLUnencrypted_TF struct {
	active types.Bool `tfsdk:"active",json:"active"`
}

func GenTFSchemaSSLUnencrypted() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"active": schema.BoolAttribute{
		Description: "Automatically generated field preventing empty message errors",
		Optional:    true,
	}}}
}

// SSLEncryptedTrusted_TF struct with tfsdk field SSLEncryptedTrusted MSSQLSource.ssl_method.encrypted_trust_server_certificate
type SSLEncryptedTrusted_TF struct {
	active types.Bool `tfsdk:"active",json:"active"`
}

func GenTFSchemaSSLEncryptedTrusted() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"active": schema.BoolAttribute{
		Description: "Automatically generated field preventing empty message errors",
		Optional:    true,
	}}}
}

// SSLEncryptedVerifyCert_TF struct with tfsdk field SSLEncryptedVerifyCert MSSQLSource.ssl_method.encrypted_verify_certificate
type SSLEncryptedVerifyCert_TF struct {
	HostNameInCertificate types.String `tfsdk:"host_name_in_certificate",json:"host_name_in_certificate"`
}

func GenTFSchemaSSLEncryptedVerifyCert() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"host_name_in_certificate": schema.StringAttribute{
		Description: "",
		Optional:    true,
	}}}
}

// SSLConfig_TF struct with tfsdk field SSLConfig MSSQLSource.ssl_method
type SSLConfig_TF struct {
	Unencrypted                     *SSLUnencrypted_TF         `tfsdk:"unencrypted",json:"unencrypted"`
	EncryptedTrustServerCertificate *SSLEncryptedTrusted_TF    `tfsdk:"encrypted_trust_server_certificate",json:"encrypted_trust_server_certificate"`
	EncryptedVerifyCertificate      *SSLEncryptedVerifyCert_TF `tfsdk:"encrypted_verify_certificate",json:"encrypted_verify_certificate"`
}

func GenTFSchemaSSLConfig() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"encrypted_trust_server_certificate": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaSSLEncryptedTrusted().Attributes,
			Description: "",
			Optional:    true,
		},
		"encrypted_verify_certificate": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaSSLEncryptedVerifyCert().Attributes,
			Description: "",
			Optional:    true,
		},
		"unencrypted": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaSSLUnencrypted().Attributes,
			Description: "",
			Optional:    true,
		},
	}}
}

// MSSQLSource_TF struct with tfsdk field MSSQLSource MSSQLSource
type MSSQLSource_TF struct {
	Host              types.String  `tfsdk:"host",json:"host"`
	Port              types.Int64   `tfsdk:"port",json:"port"`
	Database          types.String  `tfsdk:"database",json:"database"`
	Username          types.String  `tfsdk:"username",json:"username"`
	Password          types.String  `tfsdk:"password",json:"password"`
	ReplicationMethod types.Int64   `tfsdk:"replication_method",json:"replication_method"`
	SslMethod         *SSLConfig_TF `tfsdk:"ssl_method",json:"ssl_method"`
}

func GenTFSchemaMSSQLSource() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"database": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"host": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"password": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"port": schema.Int64Attribute{
			Description: "",
			Optional:    true,
		},
		"replication_method": schema.Int64Attribute{
			Description: "",
			Optional:    true,
		},
		"ssl_method": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaSSLConfig().Attributes,
			Description: "",
			Optional:    true,
		},
		"username": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
	}}
}
