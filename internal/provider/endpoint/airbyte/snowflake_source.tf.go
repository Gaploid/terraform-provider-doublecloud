// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloud/doublecloud/public-api/doublecloud/transfer/v1/endpoint/airbyte/snowflake_source.proto

package endpoint_airbyte

import (
	fmt "fmt"
	"google.golang.org/protobuf/proto"
	math "math"

	schema "github.com/hashicorp/terraform-plugin-framework/provider/schema"
	types "github.com/hashicorp/terraform-plugin-framework/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// OAuth_TF struct with tfsdk field OAuth SnowflakeSource.credentials.oauth
type OAuth_TF struct {
	ClientId     types.String `tfsdk:"client_id",json:"client_id"`
	ClientSecret types.String `tfsdk:"client_secret",json:"client_secret"`
	AccessToken  types.String `tfsdk:"access_token",json:"access_token"`
	RefreshToken types.String `tfsdk:"refresh_token",json:"refresh_token"`
}

func GenTFSchemaOAuth() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"access_token": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"client_id": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"client_secret": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"refresh_token": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
	}}
}

// BasicAuth_TF struct with tfsdk field BasicAuth SnowflakeSource.credentials.basic_auth
type BasicAuth_TF struct {
	Username types.String `tfsdk:"username",json:"username"`
	Password types.String `tfsdk:"password",json:"password"`
}

func GenTFSchemaBasicAuth() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"password": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"username": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
	}}
}

// Credentials_TF struct with tfsdk field Credentials SnowflakeSource.credentials
type SnowflakeCredentials_TF struct {
	Oauth     *OAuth_TF     `tfsdk:"oauth",json:"oauth"`
	BasicAuth *BasicAuth_TF `tfsdk:"basic_auth",json:"basic_auth"`
}

func GenTFSchemaSnowflakeCredentials() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"basic_auth": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaBasicAuth().Attributes,
			Description: "",
			Optional:    true,
		},
		"oauth": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaOAuth().Attributes,
			Description: "",
			Optional:    true,
		},
	}}
}

// SnowflakeSource_TF struct with tfsdk field SnowflakeSource SnowflakeSource
type SnowflakeSource_TF struct {
	Host          types.String             `tfsdk:"host",json:"host"`
	Role          types.String             `tfsdk:"role",json:"role"`
	Warehouse     types.String             `tfsdk:"warehouse",json:"warehouse"`
	Database      types.String             `tfsdk:"database",json:"database"`
	Schema        types.String             `tfsdk:"schema",json:"schema"`
	JdbcUrlParams types.String             `tfsdk:"jdbc_url_params",json:"jdbc_url_params"`
	Credentials   *SnowflakeCredentials_TF `tfsdk:"credentials",json:"credentials"`
}

func GenTFSchemaSnowflakeSource() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"credentials": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaSnowflakeCredentials().Attributes,
			Description: "",
			Optional:    true,
		},
		"database": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"host": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"jdbc_url_params": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"role": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"schema": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"warehouse": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
	}}
}
