// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloud/doublecloud/public-api/doublecloud/transfer/v1/endpoint/object_storage.proto

package endpoint

import (
	fmt "fmt"
	"google.golang.org/protobuf/proto"
	math "math"

	schema "github.com/hashicorp/terraform-plugin-framework/provider/schema"
	types "github.com/hashicorp/terraform-plugin-framework/types"
	_ "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// ObjectStorageConnection_TF struct with tfsdk field ObjectStorageConnection ObjectStorageConnection
type ObjectStorageConnection_TF struct {
	AwsAccessKeyId     types.String `tfsdk:"aws_access_key_id",json:"aws_access_key_id"`
	AwsSecretAccessKey types.String `tfsdk:"aws_secret_access_key",json:"aws_secret_access_key"`
	Region             types.String `tfsdk:"region",json:"region"`
	Endpoint           types.String `tfsdk:"endpoint",json:"endpoint"`
	UseSsl             types.Bool   `tfsdk:"use_ssl",json:"use_ssl"`
	VerifySslCert      types.Bool   `tfsdk:"verify_ssl_cert",json:"verify_ssl_cert"`
}

func GenTFSchemaObjectStorageConnection() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"aws_access_key_id": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"aws_secret_access_key": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"endpoint": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"region": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"use_ssl": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
		"verify_ssl_cert": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
	}}
}

// ObjectStorageSerializerConfig_TF struct with tfsdk field ObjectStorageSerializerConfig ObjectStorageSerializerConfig
type ObjectStorageSerializerConfig_TF struct {
	AnyAsString types.Bool `tfsdk:"any_as_string",json:"any_as_string"`
}

func GenTFSchemaObjectStorageSerializerConfig() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"any_as_string": schema.BoolAttribute{
		Description: "",
		Optional:    true,
	}}}
}

// ObjectStorageTarget_TF struct with tfsdk field ObjectStorageTarget ObjectStorageTarget
type ObjectStorageTarget_TF struct {
	Bucket               types.String                      `tfsdk:"bucket",json:"bucket"`
	ServiceAccountId     types.String                      `tfsdk:"service_account_id",json:"service_account_id"`
	OutputFormat         types.Int64                       `tfsdk:"output_format",json:"output_format"`
	BucketLayout         types.String                      `tfsdk:"bucket_layout",json:"bucket_layout"`
	BucketLayoutTimezone types.String                      `tfsdk:"bucket_layout_timezone",json:"bucket_layout_timezone"`
	BucketLayoutColumn   types.String                      `tfsdk:"bucket_layout_column",json:"bucket_layout_column"`
	BufferSize           types.String                      `tfsdk:"buffer_size",json:"buffer_size"`
	BufferInterval       types.String                      `tfsdk:"buffer_interval",json:"buffer_interval"`
	OutputEncoding       types.Int64                       `tfsdk:"output_encoding",json:"output_encoding"`
	Connection           *ObjectStorageConnection_TF       `tfsdk:"connection",json:"connection"`
	SerializerConfig     *ObjectStorageSerializerConfig_TF `tfsdk:"serializer_config",json:"serializer_config"`
}

func GenTFSchemaObjectStorageTarget() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"bucket": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"bucket_layout": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"bucket_layout_column": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"bucket_layout_timezone": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"buffer_interval": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"buffer_size": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"connection": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaObjectStorageConnection().Attributes,
			Description: "",
			Optional:    true,
		},
		"output_encoding": schema.Int64Attribute{
			Description: "",
			Optional:    true,
		},
		"output_format": schema.Int64Attribute{
			Description: "",
			Optional:    true,
		},
		"serializer_config": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaObjectStorageSerializerConfig().Attributes,
			Description: "",
			Optional:    true,
		},
		"service_account_id": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
	}}
}

// ObjectStorageProvider_TF struct with tfsdk field ObjectStorageProvider ObjectStorageProvider
type ObjectStorageProvider_TF struct {
	Bucket             types.String `tfsdk:"bucket",json:"bucket"`
	AwsAccessKeyId     types.String `tfsdk:"aws_access_key_id",json:"aws_access_key_id"`
	AwsSecretAccessKey types.String `tfsdk:"aws_secret_access_key",json:"aws_secret_access_key"`
	PathPrefix         types.String `tfsdk:"path_prefix",json:"path_prefix"`
	Endpoint           types.String `tfsdk:"endpoint",json:"endpoint"`
	Region             types.String `tfsdk:"region",json:"region"`
	UseSsl             types.Bool   `tfsdk:"use_ssl",json:"use_ssl"`
	VerifySslCert      types.Bool   `tfsdk:"verify_ssl_cert",json:"verify_ssl_cert"`
}

func GenTFSchemaObjectStorageProvider() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"aws_access_key_id": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"aws_secret_access_key": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"bucket": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"endpoint": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"path_prefix": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"region": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"use_ssl": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
		"verify_ssl_cert": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
	}}
}

// AdvancedOptions_TF struct with tfsdk field AdvancedOptions ObjectStorageReaderFormat.csv.advanced_options
type AdvancedOptions_TF struct {
	SkipRows                types.Int64  `tfsdk:"skip_rows",json:"skip_rows"`
	SkipRowsAfterNames      types.Int64  `tfsdk:"skip_rows_after_names",json:"skip_rows_after_names"`
	AutogenerateColumnNames types.Bool   `tfsdk:"autogenerate_column_names",json:"autogenerate_column_names"`
	ColumnNames             types.String `tfsdk:"column_names",json:"column_names"`
}

func GenTFSchemaAdvancedOptions() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"autogenerate_column_names": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
		"column_names": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"skip_rows": schema.Int64Attribute{
			Description: "",
			Optional:    true,
		},
		"skip_rows_after_names": schema.Int64Attribute{
			Description: "",
			Optional:    true,
		},
	}}
}

// AdditionalReaderOptions_TF struct with tfsdk field AdditionalReaderOptions ObjectStorageReaderFormat.csv.additional_options
type AdditionalReaderOptions_TF struct {
	NullValues             types.String `tfsdk:"null_values",json:"null_values"`
	TrueValues             types.String `tfsdk:"true_values",json:"true_values"`
	FalseValues            types.String `tfsdk:"false_values",json:"false_values"`
	DecimalPoint           types.String `tfsdk:"decimal_point",json:"decimal_point"`
	StringsCanBeNull       types.Bool   `tfsdk:"strings_can_be_null",json:"strings_can_be_null"`
	QuotedStringsCanBeNull types.Bool   `tfsdk:"quoted_strings_can_be_null",json:"quoted_strings_can_be_null"`
	IncludeColumns         types.String `tfsdk:"include_columns",json:"include_columns"`
	IncludeMissingColumns  types.Bool   `tfsdk:"include_missing_columns",json:"include_missing_columns"`
	TimestampParsers       types.String `tfsdk:"timestamp_parsers",json:"timestamp_parsers"`
}

func GenTFSchemaAdditionalReaderOptions() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"decimal_point": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"false_values": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"include_columns": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"include_missing_columns": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
		"null_values": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"quoted_strings_can_be_null": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
		"strings_can_be_null": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
		"timestamp_parsers": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"true_values": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
	}}
}

// ObjectStorageReaderFormat_TF struct with tfsdk field ObjectStorageReaderFormat ObjectStorageReaderFormat
type ObjectStorageReaderFormat_TF struct {
	Csv     *Csv_TF     `tfsdk:"csv",json:"csv"`
	Parquet *Parquet_TF `tfsdk:"parquet",json:"parquet"`
	Avro    *Avro_TF    `tfsdk:"avro",json:"avro"`
	Jsonl   *Jsonl_TF   `tfsdk:"jsonl",json:"jsonl"`
}

func GenTFSchemaObjectStorageReaderFormat() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"avro": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaAvro().Attributes,
			Description: "",
			Optional:    true,
		},
		"csv": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaCsv().Attributes,
			Description: "",
			Optional:    true,
		},
		"jsonl": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaJsonl().Attributes,
			Description: "",
			Optional:    true,
		},
		"parquet": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaParquet().Attributes,
			Description: "",
			Optional:    true,
		},
	}}
}

// ObjectStorageDataSchema_TF struct with tfsdk field ObjectStorageDataSchema ObjectStorageDataSchema
type ObjectStorageDataSchema_TF struct {
	Infer      *Empty_TF      `tfsdk:"infer",json:"infer"`
	DataSchema *DataSchema_TF `tfsdk:"data_schema",json:"data_schema"`
}

func GenTFSchemaObjectStorageDataSchema() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"data_schema": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaDataSchema().Attributes,
			Description: "",
			Optional:    true,
		},
		"infer": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaEmpty().Attributes,
			Description: "",
			Optional:    true,
		},
	}}
}

// ObjectStorageResultTable_TF struct with tfsdk field ObjectStorageResultTable ObjectStorageResultTable
type ObjectStorageResultTable_TF struct {
	TableNamespace types.String `tfsdk:"table_namespace",json:"table_namespace"`
	TableName      types.String `tfsdk:"table_name",json:"table_name"`
}

func GenTFSchemaObjectStorageResultTable() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"table_name": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"table_namespace": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
	}}
}

// SQS_TF struct with tfsdk field SQS ObjectStorageEventSource.sqs
type SQS_TF struct {
	QueueName          types.String `tfsdk:"queue_name",json:"queue_name"`
	OwnerId            types.String `tfsdk:"owner_id",json:"owner_id"`
	AwsAccessKeyId     types.String `tfsdk:"aws_access_key_id",json:"aws_access_key_id"`
	AwsSecretAccessKey types.String `tfsdk:"aws_secret_access_key",json:"aws_secret_access_key"`
	Endpoint           types.String `tfsdk:"endpoint",json:"endpoint"`
	Region             types.String `tfsdk:"region",json:"region"`
	UseSsl             types.Bool   `tfsdk:"use_ssl",json:"use_ssl"`
	VerifySslCert      types.Bool   `tfsdk:"verify_ssl_cert",json:"verify_ssl_cert"`
}

func GenTFSchemaSQS() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"aws_access_key_id": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"aws_secret_access_key": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"endpoint": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"owner_id": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"queue_name": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"region": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"use_ssl": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
		"verify_ssl_cert": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
	}}
}

// SNS_TF struct with tfsdk field SNS ObjectStorageEventSource.sns
type SNS_TF struct {
	active types.Bool `tfsdk:"active",json:"active"`
}

func GenTFSchemaSNS() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"active": schema.BoolAttribute{
		Description: "Automatically generated field preventing empty message errors",
		Optional:    true,
	}}}
}

// PubSub_TF struct with tfsdk field PubSub ObjectStorageEventSource.pub_sub
type PubSub_TF struct {
	active types.Bool `tfsdk:"active",json:"active"`
}

func GenTFSchemaPubSub() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"active": schema.BoolAttribute{
		Description: "Automatically generated field preventing empty message errors",
		Optional:    true,
	}}}
}

// ObjectStorageEventSource_TF struct with tfsdk field ObjectStorageEventSource ObjectStorageEventSource
type ObjectStorageEventSource_TF struct {
	Sqs    *SQS_TF    `tfsdk:"sqs",json:"sqs"`
	Sns    *SNS_TF    `tfsdk:"sns",json:"sns"`
	PubSub *PubSub_TF `tfsdk:"pub_sub",json:"pub_sub"`
}

func GenTFSchemaObjectStorageEventSource() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"pub_sub": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaPubSub().Attributes,
			Description: "",
			Optional:    true,
		},
		"sns": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaSNS().Attributes,
			Description: "",
			Optional:    true,
		},
		"sqs": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaSQS().Attributes,
			Description: "",
			Optional:    true,
		},
	}}
}

// ObjectStorageSource_TF struct with tfsdk field ObjectStorageSource ObjectStorageSource
type ObjectStorageSource_TF struct {
	Provider     *ObjectStorageProvider_TF     `tfsdk:"provider",json:"provider"`
	Format       *ObjectStorageReaderFormat_TF `tfsdk:"format",json:"format"`
	PathPattern  types.String                  `tfsdk:"path_pattern",json:"path_pattern"`
	ResultTable  *ObjectStorageResultTable_TF  `tfsdk:"result_table",json:"result_table"`
	ResultSchema *ObjectStorageDataSchema_TF   `tfsdk:"result_schema",json:"result_schema"`
	EventSource  *ObjectStorageEventSource_TF  `tfsdk:"event_source",json:"event_source"`
}

func GenTFSchemaObjectStorageSource() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"event_source": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaObjectStorageEventSource().Attributes,
			Description: "",
			Optional:    true,
		},
		"format": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaObjectStorageReaderFormat().Attributes,
			Description: "",
			Optional:    true,
		},
		"path_pattern": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"provider": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaObjectStorageProvider().Attributes,
			Description: "",
			Optional:    true,
		},
		"result_schema": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaObjectStorageDataSchema().Attributes,
			Description: "",
			Optional:    true,
		},
		"result_table": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaObjectStorageResultTable().Attributes,
			Description: "",
			Optional:    true,
		},
	}}
}
