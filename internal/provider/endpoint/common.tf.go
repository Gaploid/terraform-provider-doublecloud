// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloud/doublecloud/public-api/doublecloud/transfer/v1/endpoint/common.proto

package endpoint

import (
	fmt "fmt"
	"google.golang.org/protobuf/proto"
	math "math"

	schema "github.com/hashicorp/terraform-plugin-framework/provider/schema"
	types "github.com/hashicorp/terraform-plugin-framework/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Empty_TF struct with tfsdk field Empty Empty
type Empty_TF struct {
	active types.Bool `tfsdk:"active",json:"active"`
}

func GenTFSchemaEmpty() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"active": schema.BoolAttribute{
		Description: "Automatically generated field preventing empty message errors",
		Optional:    true,
	}}}
}

// AltName_TF struct with tfsdk field AltName AltName
type AltName_TF struct {
	FromName types.String `tfsdk:"from_name",json:"from_name"`
	ToName   types.String `tfsdk:"to_name",json:"to_name"`
}

func GenTFSchemaAltName() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"from_name": schema.StringAttribute{
			Description: "Source table name",
			Optional:    true,
		},
		"to_name": schema.StringAttribute{
			Description: "Target table name",
			Optional:    true,
		},
	}}
}

// Secret_TF struct with tfsdk field Secret Secret
type Secret_TF struct {
	Raw types.String `tfsdk:"raw",json:"raw"`
}

func GenTFSchemaSecret() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"raw": schema.StringAttribute{
		Description: "Raw secret value",
		Optional:    true,
	}}}
}

// ColSchema_TF struct with tfsdk field ColSchema ColSchema
type ColSchema_TF struct {
	Name     types.String `tfsdk:"name",json:"name"`
	Type     types.Int64  `tfsdk:"type",json:"type"`
	Key      types.Bool   `tfsdk:"key",json:"key"`
	Required types.Bool   `tfsdk:"required",json:"required"`
	Path     types.String `tfsdk:"path",json:"path"`
}

func GenTFSchemaColSchema() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"key": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
		"name": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"path": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
		"required": schema.BoolAttribute{
			Description: "",
			Optional:    true,
		},
		"type": schema.Int64Attribute{
			Description: "",
			Optional:    true,
		},
	}}
}

// TLSConfig_TF struct with tfsdk field TLSConfig TLSMode.enabled
type TLSConfig_TF struct {
	CaCertificate types.String `tfsdk:"ca_certificate",json:"ca_certificate"`
}

func GenTFSchemaTLSConfig() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"ca_certificate": schema.StringAttribute{
		Description: "CA certificate  X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. When CA certificate is specified TLS is used to connect to the server.",
		Optional:    true,
	}}}
}

// TLSMode_TF struct with tfsdk field TLSMode TLSMode
type TLSMode_TF struct {
	Disabled *Empty_TF     `tfsdk:"disabled",json:"disabled"`
	Enabled  *TLSConfig_TF `tfsdk:"enabled",json:"enabled"`
}

func GenTFSchemaTLSMode() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"disabled": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaEmpty().Attributes,
			Description: "",
			Optional:    true,
		},
		"enabled": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaTLSConfig().Attributes,
			Description: "",
			Optional:    true,
		},
	}}
}

// ColumnValue_TF struct with tfsdk field ColumnValue ColumnValue
type ColumnValue_TF struct {
	StringValue types.String `tfsdk:"string_value",json:"string_value"`
}

func GenTFSchemaColumnValue() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"string_value": schema.StringAttribute{
		Description: "",
		Optional:    true,
	}}}
}

// FieldList_TF struct with tfsdk field FieldList FieldList
type FieldList_TF struct {
	Fields *ColSchema_TF `tfsdk:"fields",json:"fields"`
}

func GenTFSchemaFieldList() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"fields": schema.SingleNestedAttribute{
		Attributes:  GenTFSchemaColSchema().Attributes,
		Description: "Column schema",
		Optional:    true,
	}}}
}

// DataSchema_TF struct with tfsdk field DataSchema DataSchema
type DataSchema_TF struct {
	Fields     *FieldList_TF `tfsdk:"fields",json:"fields"`
	JsonFields types.String  `tfsdk:"json_fields",json:"json_fields"`
}

func GenTFSchemaDataSchema() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{
		"fields": schema.SingleNestedAttribute{
			Attributes:  GenTFSchemaFieldList().Attributes,
			Description: "",
			Optional:    true,
		},
		"json_fields": schema.StringAttribute{
			Description: "",
			Optional:    true,
		},
	}}
}

// NoAuth_TF struct with tfsdk field NoAuth NoAuth
type NoAuth_TF struct {
	active types.Bool `tfsdk:"active",json:"active"`
}

func GenTFSchemaNoAuth() schema.SingleNestedBlock {
	return schema.SingleNestedBlock{Attributes: map[string]schema.Attribute{"active": schema.BoolAttribute{
		Description: "Automatically generated field preventing empty message errors",
		Optional:    true,
	}}}
}
